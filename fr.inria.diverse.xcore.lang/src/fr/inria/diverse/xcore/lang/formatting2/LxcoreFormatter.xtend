/*
 * generated by Xtext 2.12.0
 */
package fr.inria.diverse.xcore.lang.formatting2

import com.google.inject.Inject
import fr.inria.diverse.xcore.lang.services.LxcoreGrammarAccess
import java.util.List
import lcore.LcorePackage
import lcore.XAttribute
import lcore.XClass
import lcore.XDataType
import lcore.XEnum
import lcore.XGenericType
import lcore.XOperation
import lcore.XPackage
import lcore.XParameter
import lcore.XReference
import lcore.XTypeParameter
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.eclipse.xtext.xbase.XbasePackage
import org.eclipse.xtext.xbase.formatting2.XbaseFormatter

class LxcoreFormatter extends XbaseFormatter {
	
	
	@Inject extension LxcoreGrammarAccess
	extension LcorePackage
	extension XbasePackage

  def protected dispatch void format(XPackage xPackage, extension IFormattableDocument format)
  {
   
    xPackage.regionFor.keyword('package').prepend[noSpace]
    xPackage.regionFor.feature(XNamedElement_Name).prepend[oneSpace]

    val xImportDirectives = xPackage.importDirectives
    if (!xImportDirectives.empty)
    {
      val first = xImportDirectives.head
      val last = xImportDirectives.last
      for (xImportDirective : xImportDirectives)
      {
        xImportDirective.regionFor.keyword('import').prepend[newLines = if (xImportDirective == first) 2 else 1]
        xImportDirective.format(format)
        if (xImportDirective == last)
        {
          xImportDirective.regionForEObject.allSemanticRegions.last.append[newLines = 2]
        }
      }
    }
    else
    {
      xPackage.regionFor.feature(XNamedElement_Name).append[newLines = 2]
    }

    val xClassifiers = xPackage.classifiers
    for (xClassifier : xClassifiers)
    {
      xClassifier.format(format)
      xClassifier.regionForEObject.allSemanticRegions.head.prepend[newLines = 2]
    }
  }

  def protected dispatch void format(XEnum xEnum, extension IFormattableDocument format)
  {

    xEnum.regionFor.keywordPairs('{', '}').head.interior[indent]
    xEnum.regionFor.keyword('{').append[newLine] // }

    for (xEnumLiteral : xEnum.literals)
    {
      xEnumLiteral.format(format)
      xEnumLiteral.regionForEObject.allSemanticRegions.last.append[newLine]
    }
  }

  def protected dispatch void format(XDataType xDataType, extension IFormattableDocument format)
  {

    val leftAngleBracket = xDataType.regionFor.keyword('<')
    if (leftAngleBracket !== null)
    {
      leftAngleBracket.prepend[noSpace].append[noSpace]
      formatTypeParameters(xDataType.typeParameters, format)
      xDataType.regionFor.keyword('>').prepend[noSpace].append[oneSpace];
    }
  }

  def protected dispatch void format(XClass xClass, extension IFormattableDocument format)
  {
   
    val leftAngleBracket = xClass.regionFor.keyword('<')
    if (leftAngleBracket !== null)
    {
      leftAngleBracket.prepend[noSpace].append[noSpace]
      formatTypeParameters(xClass.typeParameters, format)
      xClass.regionFor.keyword('>').prepend[noSpace].append[oneSpace];
    }

    xClass.regionFor.keywordPairs('{', '}').head.interior[indent]
    xClass.regionFor.keyword('{').append[newLine] // }

    for (xMember : xClass.members)
    {
      xMember.format(format)
      xMember.regionForEObject.allSemanticRegions.last.append[newLine]
    }
  }

  def protected dispatch void format(XReference xReference, extension IFormattableDocument format)
  {

    xReference.type.format

    val get = xReference.getBody
    if (get !== null)
    {
      get.regionFor.keyword('{').prepend[oneSpace] // }
      get.format(format)
    }
  }

  def protected dispatch void format(XAttribute xAttribute, extension IFormattableDocument format)
  {

    xAttribute.type.format


    val get = xAttribute.getBody
    if (get !== null)
    {
      get.regionFor.keyword('{').prepend[oneSpace] // }
      get.format(format)
    }
  }

  def protected dispatch void format(XOperation xOperation, extension IFormattableDocument format)
  {

    xOperation.type.format

    val leftAngleBracket = xOperation.regionFor.keyword('<')
    if (leftAngleBracket !== null)
    {
      leftAngleBracket.prepend[oneSpace].append[noSpace]
      formatTypeParameters(xOperation.typeParameters, format)
      xOperation.regionFor.keyword('>').prepend[noSpace].append[oneSpace];
    }

    xOperation.regionFor.keyword('(').prepend[noSpace].append[noSpace]

    val xParameters = xOperation.parameters
    if (!xParameters.empty)
    {
      xOperation.regionFor.keyword(')').prepend[noSpace]

      for (xParameter : xParameters)
      {
        xParameter.format(format)
      }
    }

    val body = xOperation.body
    if (body !== null)
    {
      body.regionFor.keyword('{').prepend[oneSpace] // }
      body.format(format)
    }
  }

  def protected dispatch void format(XParameter xParameter, extension IFormattableDocument format)
  {
    xParameter.type.format
  }

  def protected dispatch void format(XGenericType xGenericType, extension IFormattableDocument format)
  {
    val leftAngleBracket = xGenericType.regionFor.keyword('<')
    if (leftAngleBracket !== null)
    {
      leftAngleBracket.prepend[noSpace].append[noSpace]
      for (XGenericType typeArgument : xGenericType.typeArguments)
      {
        typeArgument.format
        val comma = typeArgument.immediatelyFollowing.keyword(',')
        if (comma !== null)
        {
          comma.prepend[noSpace].append[oneSpace]
        }
      }

      xGenericType.regionFor.keyword('>').prepend[noSpace].append[noSpace]
    }

    val upperBound = xGenericType.upperBound
    if (upperBound !== null)
    {
      upperBound.format
      xGenericType.regionFor.keyword('extends').prepend[oneSpace].append[oneSpace]
    }

    val lowerBound = xGenericType.lowerBound
    if (lowerBound !== null)
    {
      lowerBound.format
      xGenericType.regionFor.keyword('super').prepend[oneSpace].append[oneSpace]
    }
  }

  def dispatch void format(XTypeParameter xTypeParameter, extension IFormattableDocument format)
  {
    for (XGenericType bound : xTypeParameter.bounds)
    {
      bound.format
      val ampersand = bound.immediatelyFollowing.keyword('&')
      if (ampersand !== null)
      {
        ampersand.prepend[oneSpace].append[oneSpace]
      }
    }
  }


  def protected void formatTypeParameters(List<XTypeParameter> xTypeParameters, IFormattableDocument format)
  {
    for (xTypeParameter : xTypeParameters)
    {
      format(xTypeParameter, format)
    }
  }
}
